openapi: 3.0.0
info:
  title: Accounts Service
  version: 1.0.0
  description: The Accounts Service is responsible for managing user-related operations and system configurations.
    User Management - Create, retrieve, update and delete user accounts.
    Authentication & Authorization - Handle user authentication, session management, and access control.
    System Configurations - Manage system-specific setting such as API configurations, user scopes and groups.

servers:
  - url: /accounts-svc/api/v1.0
    description: Local development server

components:
  parameters:
    UserIdParam:
      name: userId
      description: The ID of user to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

    TokenParam:
      name: token
      description: The verification token sent to the user's email
      in: path
      required: true
      schema:
        type: string

  schemas:
    # Request
    Username:
      type: string
      description: Username for the account
      pattern: '^[a-zA-Z0-9]{4,24}$'

    EmailId:
      type: string
      description: The email id of user
      pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$'

    Password:
      type: string
      description: user account password
      pattern: '^[a-zA-Z0-9@_.&*#$]{8,32}$'
  
    # Request Payload
    registerUserPayload:
      type: object
      properties:
        firstName:
          type: string
          description: First Name
          minLength: 1
        lastName:
          type: string
          description: Last Name
        username:
          type: string
          description: Username
          $ref: '#/components/schemas/Username'
        emailId:
          type: string
          description: Email Id
          $ref: '#/components/schemas/EmailId'
        password:
          type: string
          description: Password
          $ref: '#/components/schemas/Password'
      required:
        - firstName
        - username
        - emailId
        - password

    # Response Data
    healthCheckData:
      title: Schema for Health Check Data
      type: object
      properties:
        uptime:
          type: string
        timestamp:
          type: string
        hostname:
          type: string

    verificationData:
      title: Schema for User Verification Data
      type: object
      properties:
        verificationToken:
          type: string
        verificationTokenExp:
          type: string

    registerUserResponseData:
      title: Schema for Register User Response Data
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
          example: First Name
        email:
          type: string
          example: email@exmp.xyz
        username:
          type: string
          example: username
        loginType:
          type: string
          example: EMAIL_PASSWORD
        isEmailVerified:
          type: boolean
          example: true
        role:
          type: string
          example: USER
        lastLogin:
          type: string
        loginCount:
          type: integer
          example: 0
        createdDate:
          type: string
        modifiedDate:
          type: string
        verification:
          type: object
          $ref: '#/components/schemas/verificationData'
      required:
        - id
        - firstName
        - email
        - username
        - loginType
        - isEmailVerified
        - role
        - createdDate
        - modifiedDate
        - verification

    # Response
    healthCheckSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/healthCheckData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success

    registerUserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'REQUEST_COMPLETED'
        message:
          type: string
          example: 'Request Completed'
        devMessage:
          type: string
          example: 'Request Completed'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/registerUserResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    verifyUserResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success

    # Error Response
    noContentResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 204
        type:
          type: string
          example: 'CONTENT_NOT_AVAILABLE'
        message:
          type: string
          example: 'No content available'
        devMessage:
          type: string
          example: 'No content available'
        success:
          type: boolean
          example: true
        data:
          type: array

    badRequestResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad Request'
        devMessage:
          type: string
          example: Bad Request. Required resource does not exist.
        error:
          type: array
        data:
          type: array

    unauthorizedResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        type:
          type: string
          example: 'UNAUTHORIZED'
        message:
          type: string
          example: 'Unauthorized'
        devMessage:
          type: string
          example: Unauthorized access. Could not proceed with the request.
        error:
          type: array
        data:
          type: array

    forbiddenResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 403
        type:
          type: string
          example: 'FORBIDDEN'
        message:
          type: string
          example: 'Forbidden'
        devMessage:
          type: string
          example: Forbidden access. Could not proceed with the request.
        error:
          type: array
        data:
          type: array
    
    notFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 404
        type:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'Resource Not Found'
        devMessage:
          type: string
          example: Not Found. Requested resource does not exist.
        error:
          type: array
        data:
          type: array

    gone:
      type: object
      properties:
        statusCode:
          type: integer
          example: 410
        type:
          type: string
          example: 'GONE'
        message:
          type: string
          example: 'The requested content has been permanently deleted from server.'
        devMessage:
          type: string
          example: 'The requested content has been permanently deleted from server.'
        error:
          type: array
        data:
          type: array

    badEvent:
      type: object
      properties:
        statusCode:
          type: integer
          example: 489
        type:
          type: string
          example: 'BAD_EVENT'
        message:
          type: string
          example: 'The server did not understand an event package specified in an Event header field.'
        devMessage:
          type: string
          example: 'The server did not understand an event package specified in an Event header field.'
        error:
          type: array
        data:
          type: array

    userAlreadyExist:
      type: object
      properties:
        statusCode:
          type: integer
          example: 409
        type:
          type: string
          example: 'CONFLICT'
        message:
          type: string
          example: 'Resource already exist'
        devMessage:
          type: string
          example: 'Resource already exist'
        error:
          type: array
        data:
          type: array

    internalServerErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 500
        type:
          type: string
          example: 'Internal Server Error'
        message:
          type: string
          example: 'Internal Server Error'
        devMessage:
          type: string
          example: 'Internal Server Error'
        error:
          type: array
        data:
          type: array

paths:
  /health:
    get:
      operationId: healthCheck
      summary: Service Health Check
      description: An API to check the health status of the service.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheckSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /register-user:
    post:
      operationId: registerUser
      summary: Register New User
      description: An API to register a user in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerUserPayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerUserResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /verify-user/{userId}/{token}:
    put:
      operationId: verifyUser
      summary: Verify User Email ID
      description: An API to verify user email id in the system.
      parameters:
        - $ref: '#/components/parameters/UserIdParam'
        - $ref: '#/components/parameters/TokenParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verifyUserResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '410':
          description: GONE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/gone'
        '489':
          description: BAD_EVENT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badEvent'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'